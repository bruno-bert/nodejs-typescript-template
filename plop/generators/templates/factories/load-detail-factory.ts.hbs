import env from '@main/config/env'

import {
  makeLogControllerDecorator,
  makeMetricsDecorator,
} from '@main/decorators'
import { Controller } from '@presentation/protocols'

import { Load{{pascalCase name}}DetailMongoRepository } from '@infra'
// import { Load{{pascalCase name}}DetailPrismaRepository } from '@infra'

import {
  DbLoad{{pascalCase name}}Detail,
  Load{{pascalCase name}}DetailController,
  Load{{pascalCase name}}DetailProtocol,
  Load{{pascalCase name}}DetailRepositoryProtocol,
} from '@usecases'

const makeMongoRepository = (): Load{{pascalCase name}}DetailRepositoryProtocol => {
  const repository = new Load{{pascalCase name}}DetailMongoRepository()
  return repository
}

// const makePrismaRepository = (): Load{{pascalCase name}}DetailRepositoryProtocol => {
//  const repository = new Load{{pascalCase name}}DetailPrismaRepository()
//  return repository
// }

const makeDatabaseRepository = (): Load{{pascalCase name}}DetailRepositoryProtocol => {
  switch (env.DATABASE_TYPE) {
    case 'MONGODB': {
      const repository = makeMongoRepository()
      return makeMetricsDecorator(
        repository,
      ) as Load{{pascalCase name}}DetailRepositoryProtocol
    }
    // case 'PRISMA': {
    //  const repository = makeMongoRepository()
    //  return makeMetricsDecorator(
    //    repository,
    //  ) as Load{{pascalCase name}}DetailRepositoryProtocol
    // }
    default: {
      const repository = makeMongoRepository()
      return makeMetricsDecorator(
        repository,
      ) as Load{{pascalCase name}}DetailRepositoryProtocol
    }
  }
}

export const makeDbLoad{{pascalCase name}}Detail = (): Load{{pascalCase name}}DetailProtocol => {
  const repository = makeDatabaseRepository()
  return new DbLoad{{pascalCase name}}Detail(repository)
}

export const makeLoad{{pascalCase name}}DetailController = (): Controller => {
  const controller = new Load{{pascalCase name}}DetailController(makeDbLoad{{pascalCase name}}Detail())
  return makeLogControllerDecorator(controller)
}
