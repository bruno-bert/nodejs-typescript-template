import { ValidatorProtocol } from '@utils'
import { Load{{pascalCase name}}Error } from './errors'
import { Load{{pascalCase name}}Protocol, Load{{pascalCase name}}RepositoryProtocol } from './protocols'

export class DbLoad{{pascalCase name}} implements Load{{pascalCase name}}Protocol {
  constructor(
    private readonly Load{{pascalCase name}}Repository: Load{{pascalCase name}}RepositoryProtocol,
    private readonly Load{{pascalCase name}}Validator: ValidatorProtocol<any>,
  ) {}

  async load(): Promise<Load{{pascalCase name}}Protocol.Result> {
    try {
      // this.Load{{pascalCase name}}Validator.validate(null, {})
      return await this.Load{{pascalCase name}}Repository.loadAll()
    } catch (error) {
      throw new Load{{pascalCase name}}Error(error as unknown as string)
    }
  }
}
