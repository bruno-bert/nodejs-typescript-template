import { ValidatorProtocol } from '@utils'
import { Load{{pascalCase name}}PagingError } from './errors'
import {
  Load{{pascalCase name}}PagingProtocol,
  Load{{pascalCase name}}PagingRepositoryProtocol,
} from './protocols'

export class DbLoad{{pascalCase name}}Paging implements Load{{pascalCase name}}PagingProtocol {
  constructor(
    private readonly Load{{pascalCase name}}PagingRepository: Load{{pascalCase name}}PagingRepositoryProtocol,
    private readonly Load{{pascalCase name}}PagingValidator: ValidatorProtocol<Load{{pascalCase name}}PagingRepositoryProtocol.Params>,
  ) {}

  async loadPaging(): Promise<Load{{pascalCase name}}PagingProtocol.Result> {
    try {
      // this.Load{{pascalCase name}}PagingValidator.validate(null, {})
      return await this.Load{{pascalCase name}}PagingRepository.loadPaging()
    } catch (error) {
      throw new Load{{pascalCase name}}PagingError(error as unknown as string)
    }
  }
}
