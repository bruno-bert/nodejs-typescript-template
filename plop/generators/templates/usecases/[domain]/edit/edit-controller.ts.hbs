import { Controller, HttpResponse } from '@presentation/protocols'
import { noContent, ok, notFound } from '@presentation/helpers'
import { Edit{{pascalCase name}}Protocol } from './protocols'
import { Edit{{pascalCase name}}Model } from '@usecases'
import { Edit{{pascalCase name}}NotFoundError } from './errors'
import { errorToHttpResponse } from '@utils/error-handler'

export class Edit{{pascalCase name}}Controller implements Controller {
  constructor(private readonly Edit{{pascalCase name}}: Edit{{pascalCase name}}Protocol) {}

  async map({
    id,
   {{listFieldNames fields}}
  }: Edit{{pascalCase name}}Controller.Request): Promise<Edit{{pascalCase name}}Model.Params> {
    return { id, {{listFieldNames fields}} }
  }

  async handle({
    id,
   {{listFieldNames fields}}
  }: Edit{{pascalCase name}}Controller.Request): Promise<HttpResponse> {
    try {
      const params = await this.map({
        id,
      {{listFieldNames fields}}
      })

      const data = await this.Edit{{pascalCase name}}.edit(id, params)
      return data ? ok(data) : noContent()
    } catch (error: any) {
      if (error instanceof Edit{{pascalCase name}}NotFoundError) return notFound()
      return errorToHttpResponse(error)
    }
  }
}

export namespace Edit{{pascalCase name}}Controller {
  export type Request = {
    id: string
    {{listFieldsTypescript fields}}
  }
}
