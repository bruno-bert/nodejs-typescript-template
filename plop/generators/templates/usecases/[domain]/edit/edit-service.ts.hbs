import { Edit{{pascalCase name}}Model } from '@usecases'
import { Edit{{pascalCase name}}Protocol, Edit{{pascalCase name}}RepositoryProtocol } from './protocols'
import { ValidatorProtocol } from '@utils'
import { schema } from './edit-{{kebabCase name}}-service-schema'

export class DbEdit{{pascalCase name}} implements Edit{{pascalCase name}}Protocol {
  constructor(
    private readonly Edit{{pascalCase name}}Repository: Edit{{pascalCase name}}RepositoryProtocol,
    private readonly Edit{{pascalCase name}}Validator: ValidatorProtocol<Edit{{pascalCase name}}RepositoryProtocol.Params>,
  ) {}

  async map({
    id,
    {{listFieldNames fields}}
  }: Edit{{pascalCase name}}Model.Params): Promise<Edit{{pascalCase name}}RepositoryProtocol.Params> {
    return {
      id,
      {{listFieldNames fields}}
    }
  }

  async edit(
    id: string,
    {  {{listFieldNames fields}} }: Edit{{pascalCase name}}Model.Params,
  ): Promise<Edit{{pascalCase name}}Protocol.Result> {
    this.Edit{{pascalCase name}}Validator.validate(schema, {
      id,
       {{listFieldNames fields}}
    })

    const params = await this.map({
      id,
       {{listFieldNames fields}}
    })

    return this.Edit{{pascalCase name}}Repository.edit(id, params)
  }
}
