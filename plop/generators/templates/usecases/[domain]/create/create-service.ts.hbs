import { Create{{pascalCase name}}Model, MissingParamsError } from '@usecases'
import { Create{{pascalCase name}}Protocol, Create{{pascalCase name}}RepositoryProtocol } from './protocols'
import { ValidatorProtocol } from '@utils'
import { schema } from './create-{{kebabCase name}}-service-schema'

export class DbCreate{{pascalCase name}} implements Create{{pascalCase name}}Protocol {
  constructor(
    private readonly Create{{pascalCase name}}Repository: Create{{pascalCase name}}RepositoryProtocol,
    private readonly Create{{pascalCase name}}Valitator: ValidatorProtocol<Create{{pascalCase name}}RepositoryProtocol.Params>,
  ) {}

  async map({
    name,
    welcomeMessage,
    date,
  }: Create{{pascalCase name}}Model.Params): Promise<Create{{pascalCase name}}RepositoryProtocol.Params> {
    return {
      name,
      welcomeMessage,
      date,
    }
  }

  handleValidationErrors(validate: ValidatorProtocol.Result) {
    throw new MissingParamsError(validate.originalMessage || '')
  }

  async create({
    name,
    welcomeMessage,
    date,
  }: Create{{pascalCase name}}Model.Params): Promise<Create{{pascalCase name}}Protocol.Result> {
    const validate = await this.Create{{pascalCase name}}Valitator.validate(schema, {
      name,
      welcomeMessage,
      date,
    })

    if (!validate.success) this.handleValidationErrors(validate)

    const params = await this.map({
      name,
      welcomeMessage,
      date,
    })

    return this.Create{{pascalCase name}}Repository.create(params)
  }
}
