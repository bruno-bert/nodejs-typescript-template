import { MongoHelper, QueryBuilder } from '@infra/mongodb'
import { AddChatRepository, LoadChatsRepository, LoadChatByIdRepository, CheckChatByIdRepository, UpdateChatByIdRepository } from '@/data/protocols/db'
import { ObjectId } from 'mongodb'

export class ChatMongoRepository implements AddChatRepository, LoadChatByIdRepository, CheckChatByIdRepository {
    async add(data: AddChatRepository.Params): Promise<void> {
        const ChatCollection = await MongoHelper.getCollection('chats')
        await ChatCollection.insertOne(data)
    }



    async updateById(accountId: string, id: string, data: UpdateChatByIdRepository.Params): Promise<LoadChatByIdRepository.Result> {
        const ChatCollection = await MongoHelper.getCollection('chats')

        const query = {
            accountId,
            _id: new ObjectId(id)
        }

        const update = {
            $set: data
        }

        const Chat = await ChatCollection.findOneAndUpdate(query, update, { returnDocument: 'after' })
        if (Chat.value) {
            return MongoHelper.map(Chat.value)
        } else {
            return null
        }
    }


}